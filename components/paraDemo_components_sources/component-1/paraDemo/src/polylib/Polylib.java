package polylib;

import java.net.URL;

import util.GoodShell;


/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.29
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class Polylib implements PolylibConstants {
	
	static{
		try{
		     System.loadLibrary("polylib32");
		}catch(UnsatisfiedLinkError e){
			CopyDll.copy();
			System.loadLibrary("polylib32");
		}
	}
	
  public static SWIGTYPE_p_FILE getStdin() {
    long cPtr = PolylibJNI.stdin_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_FILE(cPtr, false);
  }

  public static SWIGTYPE_p_FILE getStdout() {
    long cPtr = PolylibJNI.stdout_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_FILE(cPtr, false);
  }

  public static SWIGTYPE_p_FILE getStderr() {
    long cPtr = PolylibJNI.stderr_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_FILE(cPtr, false);
  }

  public static int printf(String _Format) {
    return PolylibJNI.printf(_Format);
  }

  public static long getOverflow_error() {
    return PolylibJNI.overflow_error_get();
  }

  public static long getSimplex_arithmetic_error() {
    return PolylibJNI.simplex_arithmetic_error_get();
  }

  public static long getUser_exception_error() {
    return PolylibJNI.user_exception_error_get();
  }

  public static long getParser_exception_error() {
    return PolylibJNI.parser_exception_error_get();
  }

  public static long getAny_exception_error() {
    return PolylibJNI.any_exception_error_get();
  }

  public static long getThe_last_just_thrown_exception() {
    return PolylibJNI.the_last_just_thrown_exception_get();
  }

  public static void dump_exception_stack_to_file(SWIGTYPE_p_FILE arg0) {
    PolylibJNI.dump_exception_stack_to_file(SWIGTYPE_p_FILE.getCPtr(arg0));
  }

  public static void dump_exception_stack() {
    PolylibJNI.dump_exception_stack();
  }

  public static SWIGTYPE_p_jmp_buf push_exception_on_stack(int arg0, String arg1, String arg2, int arg3) {
    long cPtr = PolylibJNI.push_exception_on_stack(arg0, arg1, arg2, arg3);
    return (cPtr == 0) ? null : new SWIGTYPE_p_jmp_buf(cPtr, false);
  }

  public static void pop_exception_from_stack(int arg0, String arg1, String arg2, int arg3) {
    PolylibJNI.pop_exception_from_stack(arg0, arg1, arg2, arg3);
  }

  public static void throw_exception(int arg0, String arg1, String arg2, int arg3) {
    PolylibJNI.throw_exception(arg0, arg1, arg2, arg3);
  }

  public static int getPol_status() {
    return PolylibJNI.Pol_status_get();
  }

  public static void errormsg1(String f, String msgname, String msg) {
    PolylibJNI.errormsg1(f, msgname, msg);
  }

  public static int ConstraintSimplify(SWIGTYPE_p_int old, SWIGTYPE_p_int n, int len, SWIGTYPE_p_int v) {
    return PolylibJNI.ConstraintSimplify(SWIGTYPE_p_int.getCPtr(old), SWIGTYPE_p_int.getCPtr(n), len, SWIGTYPE_p_int.getCPtr(v));
  }

  public static SWIGTYPE_p_int value_alloc(int want, SWIGTYPE_p_int got) {
    long cPtr = PolylibJNI.value_alloc(want, SWIGTYPE_p_int.getCPtr(got));
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static void value_free(SWIGTYPE_p_int p, int size) {
    PolylibJNI.value_free(SWIGTYPE_p_int.getCPtr(p), size);
  }

  public static void Factorial(int n, SWIGTYPE_p_int result) {
    PolylibJNI.Factorial(n, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Binomial(int n, int p, SWIGTYPE_p_int result) {
    PolylibJNI.Binomial(n, p, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void CNP(int a, int b, SWIGTYPE_p_int result) {
    PolylibJNI.CNP(a, b, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Gcd(int a, int b, SWIGTYPE_p_int result) {
    PolylibJNI.Gcd(a, b, SWIGTYPE_p_int.getCPtr(result));
  }

  public static int First_Non_Zero(SWIGTYPE_p_int p, long length) {
    return PolylibJNI.First_Non_Zero(SWIGTYPE_p_int.getCPtr(p), length);
  }

  public static Vector Vector_Alloc(long length) {
    long cPtr = PolylibJNI.Vector_Alloc(length);
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public static void Vector_Free(Vector vector) {
    PolylibJNI.Vector_Free(Vector.getCPtr(vector));
  }

  public static void Vector_Print(SWIGTYPE_p_FILE Dst, String Format, Vector Vec) {
    PolylibJNI.Vector_Print(SWIGTYPE_p_FILE.getCPtr(Dst), Format, Vector.getCPtr(Vec));
  }

  public static Vector Vector_Read() {
    long cPtr = PolylibJNI.Vector_Read();
    return (cPtr == 0) ? null : new Vector(cPtr, false);
  }

  public static void Vector_Set(SWIGTYPE_p_int p, int n, long length) {
    PolylibJNI.Vector_Set(SWIGTYPE_p_int.getCPtr(p), n, length);
  }

  public static void Vector_Exchange(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, long length) {
    PolylibJNI.Vector_Exchange(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), length);
  }

  public static void Vector_Copy(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, long length) {
    PolylibJNI.Vector_Copy(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), length);
  }

  public static void Vector_Add(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, SWIGTYPE_p_int p3, long length) {
    PolylibJNI.Vector_Add(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), SWIGTYPE_p_int.getCPtr(p3), length);
  }

  public static void Vector_Sub(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, SWIGTYPE_p_int p3, long length) {
    PolylibJNI.Vector_Sub(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), SWIGTYPE_p_int.getCPtr(p3), length);
  }

  public static void Vector_Or(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, SWIGTYPE_p_int p3, long length) {
    PolylibJNI.Vector_Or(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), SWIGTYPE_p_int.getCPtr(p3), length);
  }

  public static void Vector_Scale(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, int lambda, long length) {
    PolylibJNI.Vector_Scale(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), lambda, length);
  }

  public static void Vector_AntiScale(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, int lambda, long length) {
    PolylibJNI.Vector_AntiScale(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), lambda, length);
  }

  public static void Inner_Product(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, long length, SWIGTYPE_p_int result) {
    PolylibJNI.Inner_Product(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), length, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Max(SWIGTYPE_p_int p, long length, SWIGTYPE_p_int result) {
    PolylibJNI.Vector_Max(SWIGTYPE_p_int.getCPtr(p), length, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Min(SWIGTYPE_p_int p, long length, SWIGTYPE_p_int result) {
    PolylibJNI.Vector_Min(SWIGTYPE_p_int.getCPtr(p), length, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Combine(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, SWIGTYPE_p_int p3, int lambda, int mu, long length) {
    PolylibJNI.Vector_Combine(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), SWIGTYPE_p_int.getCPtr(p3), lambda, mu, length);
  }

  public static int Vector_Equal(SWIGTYPE_p_int Vec1, SWIGTYPE_p_int Vec2, long n) {
    return PolylibJNI.Vector_Equal(SWIGTYPE_p_int.getCPtr(Vec1), SWIGTYPE_p_int.getCPtr(Vec2), n);
  }

  public static void Vector_Min_Not_Zero(SWIGTYPE_p_int p, long length, SWIGTYPE_p_int index, SWIGTYPE_p_int result) {
    PolylibJNI.Vector_Min_Not_Zero(SWIGTYPE_p_int.getCPtr(p), length, SWIGTYPE_p_int.getCPtr(index), SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Gcd(SWIGTYPE_p_int p, long length, SWIGTYPE_p_int result) {
    PolylibJNI.Vector_Gcd(SWIGTYPE_p_int.getCPtr(p), length, SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Map(SWIGTYPE_p_int p1, SWIGTYPE_p_int p2, SWIGTYPE_p_int p3, long length, SWIGTYPE_p_f_int_int__p_int f) {
    PolylibJNI.Vector_Map(SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2), SWIGTYPE_p_int.getCPtr(p3), length, SWIGTYPE_p_f_int_int__p_int.getCPtr(f));
  }

  public static void Vector_Normalize(SWIGTYPE_p_int p, long length) {
    PolylibJNI.Vector_Normalize(SWIGTYPE_p_int.getCPtr(p), length);
  }

  public static void Vector_Normalize_Positive(SWIGTYPE_p_int p, int length, int pos) {
    PolylibJNI.Vector_Normalize_Positive(SWIGTYPE_p_int.getCPtr(p), length, pos);
  }

  public static void Vector_Reduce(SWIGTYPE_p_int p, long length, SWIGTYPE_p_f_int_p_int__void f, SWIGTYPE_p_int result) {
    PolylibJNI.Vector_Reduce(SWIGTYPE_p_int.getCPtr(p), length, SWIGTYPE_p_f_int_p_int__void.getCPtr(f), SWIGTYPE_p_int.getCPtr(result));
  }

  public static void Vector_Sort(SWIGTYPE_p_int vector, long n) {
    PolylibJNI.Vector_Sort(SWIGTYPE_p_int.getCPtr(vector), n);
  }

  public static int Vector_IsZero(SWIGTYPE_p_int v, long length) {
    return PolylibJNI.Vector_IsZero(SWIGTYPE_p_int.getCPtr(v), length);
  }

  public static Matrix Matrix_Alloc(long NbRows, long NbColumns) {
    long cPtr = PolylibJNI.Matrix_Alloc(NbRows, NbColumns);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void Matrix_Free(Matrix Mat) {
    PolylibJNI.Matrix_Free(Matrix.getCPtr(Mat));
  }

  public static void Matrix_Print(SWIGTYPE_p_FILE Dst, String Format, Matrix Mat) {
    PolylibJNI.Matrix_Print(SWIGTYPE_p_FILE.getCPtr(Dst), Format, Matrix.getCPtr(Mat));
  }

  public static void Matrix_Read_Input(Matrix Mat) {
    PolylibJNI.Matrix_Read_Input(Matrix.getCPtr(Mat));
  }

  public static Matrix Matrix_Read() {
    long cPtr = PolylibJNI.Matrix_Read();
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void right_hermite(Matrix A, SWIGTYPE_p_p_matrix Hp, SWIGTYPE_p_p_matrix Up, SWIGTYPE_p_p_matrix Qp) {
    PolylibJNI.right_hermite(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(Hp), SWIGTYPE_p_p_matrix.getCPtr(Up), SWIGTYPE_p_p_matrix.getCPtr(Qp));
  }

  public static void left_hermite(Matrix A, SWIGTYPE_p_p_matrix Hp, SWIGTYPE_p_p_matrix Qp, SWIGTYPE_p_p_matrix Up) {
    PolylibJNI.left_hermite(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(Hp), SWIGTYPE_p_p_matrix.getCPtr(Qp), SWIGTYPE_p_p_matrix.getCPtr(Up));
  }

  public static int MatInverse(Matrix M, Matrix MInv) {
    return PolylibJNI.MatInverse(Matrix.getCPtr(M), Matrix.getCPtr(MInv));
  }

  public static void rat_prodmat(Matrix S, Matrix X, Matrix P) {
    PolylibJNI.rat_prodmat(Matrix.getCPtr(S), Matrix.getCPtr(X), Matrix.getCPtr(P));
  }

  public static void Matrix_Vector_Product(Matrix mat, SWIGTYPE_p_int p1, SWIGTYPE_p_int p2) {
    PolylibJNI.Matrix_Vector_Product(Matrix.getCPtr(mat), SWIGTYPE_p_int.getCPtr(p1), SWIGTYPE_p_int.getCPtr(p2));
  }

  public static void Vector_Matrix_Product(SWIGTYPE_p_int p1, Matrix mat, SWIGTYPE_p_int p2) {
    PolylibJNI.Vector_Matrix_Product(SWIGTYPE_p_int.getCPtr(p1), Matrix.getCPtr(mat), SWIGTYPE_p_int.getCPtr(p2));
  }

  public static void Matrix_Product(Matrix mat1, Matrix mat2, Matrix mat3) {
    PolylibJNI.Matrix_Product(Matrix.getCPtr(mat1), Matrix.getCPtr(mat2), Matrix.getCPtr(mat3));
  }

  public static int Matrix_Inverse(Matrix Mat, Matrix MatInv) {
    return PolylibJNI.Matrix_Inverse(Matrix.getCPtr(Mat), Matrix.getCPtr(MatInv));
  }

  public static void Polyhedron_Compute_Dual(Polyhedron P) {
    PolylibJNI.Polyhedron_Compute_Dual(Polyhedron.getCPtr(P));
  }

  public static Polyhedron DomainConstraintSimplify(Polyhedron P, long MaxRays) {
    long cPtr = PolylibJNI.DomainConstraintSimplify(Polyhedron.getCPtr(P), MaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron AddConstraints(SWIGTYPE_p_int Con, long NbConstraints, Polyhedron Pol, long NbMaxRays) {
    long cPtr = PolylibJNI.AddConstraints(SWIGTYPE_p_int.getCPtr(Con), NbConstraints, Polyhedron.getCPtr(Pol), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron AddPolyToDomain(Polyhedron Pol, Polyhedron PolDomain) {
    long cPtr = PolylibJNI.AddPolyToDomain(Polyhedron.getCPtr(Pol), Polyhedron.getCPtr(PolDomain));
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron AddRays(SWIGTYPE_p_int Ray2, long NbRay2, Polyhedron Pol1, long NbMaxRays) {
    long cPtr = PolylibJNI.AddRays(SWIGTYPE_p_int.getCPtr(Ray2), NbRay2, Polyhedron.getCPtr(Pol1), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron align_context(Polyhedron Pol, int align_dimension, int NbMaxRays) {
    long cPtr = PolylibJNI.align_context(Polyhedron.getCPtr(Pol), align_dimension, NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Constraints2Polyhedron(Matrix Constraints, long NbMaxRays) {
    long cPtr = PolylibJNI.Constraints2Polyhedron(Matrix.getCPtr(Constraints), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Disjoint_Domain(Polyhedron Pol, int flag, long NbMaxRays) {
    long cPtr = PolylibJNI.Disjoint_Domain(Polyhedron.getCPtr(Pol), flag, NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainAddConstraints(Polyhedron Pol, Matrix Mat, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainAddConstraints(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Mat), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainAddRays(Polyhedron Pol, Matrix Ray, long NbMaxConstrs) {
    long cPtr = PolylibJNI.DomainAddRays(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Ray), NbMaxConstrs);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainConvex(Polyhedron Pol, long NbMaxConstrs) {
    long cPtr = PolylibJNI.DomainConvex(Polyhedron.getCPtr(Pol), NbMaxConstrs);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Interval DomainCost(Polyhedron Pol, SWIGTYPE_p_int Cost) {
    long cPtr = PolylibJNI.DomainCost(Polyhedron.getCPtr(Pol), SWIGTYPE_p_int.getCPtr(Cost));
    return (cPtr == 0) ? null : new Interval(cPtr, false);
  }

  public static Polyhedron DomainDifference(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainDifference(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainImage(Polyhedron Pol, Matrix Func, long NbMaxConstrs) {
    long cPtr = PolylibJNI.DomainImage(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Func), NbMaxConstrs);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainIntersection(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainIntersection(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainPreimage(Polyhedron Pol, Matrix Func, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainPreimage(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Func), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainSimplify(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainSimplify(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Stras_DomainSimplify(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.Stras_DomainSimplify(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron DomainUnion(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.DomainUnion(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Domain_Copy(Polyhedron Pol) {
    long cPtr = PolylibJNI.Domain_Copy(Polyhedron.getCPtr(Pol));
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static void Domain_Free(Polyhedron Pol) {
    PolylibJNI.Domain_Free(Polyhedron.getCPtr(Pol));
  }

  public static void Domain_PrintConstraints(SWIGTYPE_p_FILE Dst, String Format, Polyhedron Pol) {
    PolylibJNI.Domain_PrintConstraints(SWIGTYPE_p_FILE.getCPtr(Dst), Format, Polyhedron.getCPtr(Pol));
  }

  public static Polyhedron Empty_Polyhedron(long Dimension) {
    long cPtr = PolylibJNI.Empty_Polyhedron(Dimension);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static int Gauss(Matrix Mat, int NbEq, int Dimension) {
    return PolylibJNI.Gauss(Matrix.getCPtr(Mat), NbEq, Dimension);
  }

  public static int lower_upper_bounds(int pos, Polyhedron P, SWIGTYPE_p_int context, SWIGTYPE_p_int LBp, SWIGTYPE_p_int UBp) {
    return PolylibJNI.lower_upper_bounds(pos, Polyhedron.getCPtr(P), SWIGTYPE_p_int.getCPtr(context), SWIGTYPE_p_int.getCPtr(LBp), SWIGTYPE_p_int.getCPtr(UBp));
  }

  public static Matrix Polyhedron2Constraints(Polyhedron Pol) {
    long cPtr = PolylibJNI.Polyhedron2Constraints(Polyhedron.getCPtr(Pol));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix Polyhedron2Rays(Polyhedron Pol) {
    long cPtr = PolylibJNI.Polyhedron2Rays(Polyhedron.getCPtr(Pol));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static int PolyhedronIncludes(Polyhedron Pol1, Polyhedron Pol2) {
    return PolylibJNI.PolyhedronIncludes(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2));
  }

  public static Polyhedron Polyhedron_Alloc(long Dimension, long NbConstraints, long NbRays) {
    long cPtr = PolylibJNI.Polyhedron_Alloc(Dimension, NbConstraints, NbRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Polyhedron_Copy(Polyhedron Pol) {
    long cPtr = PolylibJNI.Polyhedron_Copy(Polyhedron.getCPtr(Pol));
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static void Polyhedron_Free(Polyhedron Pol) {
    PolylibJNI.Polyhedron_Free(Polyhedron.getCPtr(Pol));
  }

  public static Polyhedron Polyhedron_Image(Polyhedron Pol, Matrix Func, long NbMaxConstrs) {
    long cPtr = PolylibJNI.Polyhedron_Image(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Func), NbMaxConstrs);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Polyhedron_Preimage(Polyhedron Pol, Matrix Func, long NbMaxRays) {
    long cPtr = PolylibJNI.Polyhedron_Preimage(Polyhedron.getCPtr(Pol), Matrix.getCPtr(Func), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static void Polyhedron_Print(SWIGTYPE_p_FILE Dst, String Format, Polyhedron Pol) {
    PolylibJNI.Polyhedron_Print(SWIGTYPE_p_FILE.getCPtr(Dst), Format, Polyhedron.getCPtr(Pol));
  }

  public static void Polyhedron_PrintConstraints(SWIGTYPE_p_FILE Dst, String Format, Polyhedron Pol) {
    PolylibJNI.Polyhedron_PrintConstraints(SWIGTYPE_p_FILE.getCPtr(Dst), Format, Polyhedron.getCPtr(Pol));
  }

  public static Polyhedron Polyhedron_Scan(Polyhedron D, Polyhedron C, long MAXRAYS) {
    long cPtr = PolylibJNI.Polyhedron_Scan(Polyhedron.getCPtr(D), Polyhedron.getCPtr(C), MAXRAYS);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static void PolyPrint(Polyhedron Pol) {
    PolylibJNI.PolyPrint(Polyhedron.getCPtr(Pol));
  }

  public static Polyhedron Rays2Polyhedron(Matrix Ray, long NbMaxConstrs) {
    long cPtr = PolylibJNI.Rays2Polyhedron(Matrix.getCPtr(Ray), NbMaxConstrs);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron SubConstraint(SWIGTYPE_p_int Con, Polyhedron Pol, long NbMaxRays, int Pass) {
    long cPtr = PolylibJNI.SubConstraint(SWIGTYPE_p_int.getCPtr(Con), Polyhedron.getCPtr(Pol), NbMaxRays, Pass);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron Universe_Polyhedron(long Dimension) {
    long cPtr = PolylibJNI.Universe_Polyhedron(Dimension);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static void Compute_PDomains(Param_Domain PD, int nb_domains, int working_space) {
    PolylibJNI.Compute_PDomains(Param_Domain.getCPtr(PD), nb_domains, working_space);
  }

  public static Param_Polyhedron GenParamPolyhedron(Polyhedron Pol) {
    long cPtr = PolylibJNI.GenParamPolyhedron(Polyhedron.getCPtr(Pol));
    return (cPtr == 0) ? null : new Param_Polyhedron(cPtr, false);
  }

  public static void Param_Domain_Free(Param_Domain PD) {
    PolylibJNI.Param_Domain_Free(Param_Domain.getCPtr(PD));
  }

  public static void Param_Polyhedron_Free(Param_Polyhedron P) {
    PolylibJNI.Param_Polyhedron_Free(Param_Polyhedron.getCPtr(P));
  }

  public static void Param_Vertices_Free(Param_Vertices PV) {
    PolylibJNI.Param_Vertices_Free(Param_Vertices.getCPtr(PV));
  }

  public static void Param_Vertices_Print(SWIGTYPE_p_FILE DST, Param_Vertices PV, SWIGTYPE_p_p_char param_names) {
    PolylibJNI.Param_Vertices_Print(SWIGTYPE_p_FILE.getCPtr(DST), Param_Vertices.getCPtr(PV), SWIGTYPE_p_p_char.getCPtr(param_names));
  }

  public static Polyhedron PDomainDifference(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.PDomainDifference(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Polyhedron PDomainIntersection(Polyhedron Pol1, Polyhedron Pol2, long NbMaxRays) {
    long cPtr = PolylibJNI.PDomainIntersection(Polyhedron.getCPtr(Pol1), Polyhedron.getCPtr(Pol2), NbMaxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Param_Polyhedron Polyhedron2Param_Domain(Polyhedron Din, Polyhedron Cin, int working_space) {
    long cPtr = PolylibJNI.Polyhedron2Param_Domain(Polyhedron.getCPtr(Din), Polyhedron.getCPtr(Cin), working_space);
    return (cPtr == 0) ? null : new Param_Polyhedron(cPtr, false);
  }

  public static Param_Polyhedron Polyhedron2Param_SimplifiedDomain(SWIGTYPE_p_p_polyhedron Din, Polyhedron Cin, int working_space, SWIGTYPE_p_p_polyhedron CEq, SWIGTYPE_p_p_matrix CT) {
    long cPtr = PolylibJNI.Polyhedron2Param_SimplifiedDomain(SWIGTYPE_p_p_polyhedron.getCPtr(Din), Polyhedron.getCPtr(Cin), working_space, SWIGTYPE_p_p_polyhedron.getCPtr(CEq), SWIGTYPE_p_p_matrix.getCPtr(CT));
    return (cPtr == 0) ? null : new Param_Polyhedron(cPtr, false);
  }

  public static Param_Polyhedron Polyhedron2Param_Vertices(Polyhedron Din, Polyhedron Cin, int working_space) {
    long cPtr = PolylibJNI.Polyhedron2Param_Vertices(Polyhedron.getCPtr(Din), Polyhedron.getCPtr(Cin), working_space);
    return (cPtr == 0) ? null : new Param_Polyhedron(cPtr, false);
  }

  public static void Print_Domain(SWIGTYPE_p_FILE DST, Polyhedron D, SWIGTYPE_p_p_char param_names) {
    PolylibJNI.Print_Domain(SWIGTYPE_p_FILE.getCPtr(DST), Polyhedron.getCPtr(D), SWIGTYPE_p_p_char.getCPtr(param_names));
  }

  public static void Print_Vertex(SWIGTYPE_p_FILE DST, Matrix V, SWIGTYPE_p_p_char param_names) {
    PolylibJNI.Print_Vertex(SWIGTYPE_p_FILE.getCPtr(DST), Matrix.getCPtr(V), SWIGTYPE_p_p_char.getCPtr(param_names));
  }

  public static Matrix VertexCT(Matrix V, Matrix CT) {
    long cPtr = PolylibJNI.VertexCT(Matrix.getCPtr(V), Matrix.getCPtr(CT));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static SWIGTYPE_p_p_char Read_ParamNames(SWIGTYPE_p_FILE in, int m) {
    long cPtr = PolylibJNI.Read_ParamNames(SWIGTYPE_p_FILE.getCPtr(in), m);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_char(cPtr, false);
  }

  public static int GaussSimplify(Matrix M, Matrix M2) {
    return PolylibJNI.GaussSimplify(Matrix.getCPtr(M), Matrix.getCPtr(M2));
  }

  public static int PolyhedronLTQ(Polyhedron P1, Polyhedron P2, int INDEX, int PDIM, int MAXRAYS) {
    return PolylibJNI.PolyhedronLTQ(Polyhedron.getCPtr(P1), Polyhedron.getCPtr(P2), INDEX, PDIM, MAXRAYS);
  }

  public static int PolyhedronTSort(SWIGTYPE_p_p_polyhedron L, long n, long index, long pdim, SWIGTYPE_p_int time, SWIGTYPE_p_int pvect, long MAXRAYS) {
    return PolylibJNI.PolyhedronTSort(SWIGTYPE_p_p_polyhedron.getCPtr(L), n, index, pdim, SWIGTYPE_p_int.getCPtr(time), SWIGTYPE_p_int.getCPtr(pvect), MAXRAYS);
  }

  public static int Polyhedron_Not_Empty(Polyhedron P, Polyhedron C, int MAXRAYS) {
    return PolylibJNI.Polyhedron_Not_Empty(Polyhedron.getCPtr(P), Polyhedron.getCPtr(C), MAXRAYS);
  }

  public static int getOverflow_warning_flag() {
    return PolylibJNI.overflow_warning_flag_get();
  }

  public static void count_points(int pos, Polyhedron P, SWIGTYPE_p_int context, SWIGTYPE_p_int res) {
    PolylibJNI.count_points(pos, Polyhedron.getCPtr(P), SWIGTYPE_p_int.getCPtr(context), SWIGTYPE_p_int.getCPtr(res));
  }

  public static void eadd(evalue e1, evalue res) {
    PolylibJNI.eadd(evalue.getCPtr(e1), evalue.getCPtr(res));
  }

  public static enode ecopy(enode e) {
    long cPtr = PolylibJNI.ecopy(enode.getCPtr(e));
    return (cPtr == 0) ? null : new enode(cPtr, false);
  }

  public static void edot(enode v1, enode v2, evalue res) {
    PolylibJNI.edot(enode.getCPtr(v1), enode.getCPtr(v2), evalue.getCPtr(res));
  }

  public static enode new_enode2(enode_type type, int size, int pos) {
    long cPtr = PolylibJNI.new_enode(type.swigValue(), size, pos);
    return (cPtr == 0) ? null : new enode(cPtr, false);
  }

  public static void free_evalue_refs(evalue e) {
    PolylibJNI.free_evalue_refs(evalue.getCPtr(e));
  }

  public static Enumeration Polyhedron_Enumerate(Polyhedron P, Polyhedron C, long MAXRAYS, SWIGTYPE_p_p_char pname) {
    long cPtr = PolylibJNI.Polyhedron_Enumerate(Polyhedron.getCPtr(P), Polyhedron.getCPtr(C), MAXRAYS, SWIGTYPE_p_p_char.getCPtr(pname));
    return (cPtr == 0) ? null : new Enumeration(cPtr, false);
  }

  public static void print_enode(SWIGTYPE_p_FILE DST, enode p, SWIGTYPE_p_p_char pname) {
    PolylibJNI.print_enode(SWIGTYPE_p_FILE.getCPtr(DST), enode.getCPtr(p), SWIGTYPE_p_p_char.getCPtr(pname));
  }

  public static void print_evalue(SWIGTYPE_p_FILE DST, evalue e, SWIGTYPE_p_p_char pname) {
    PolylibJNI.print_evalue(SWIGTYPE_p_FILE.getCPtr(DST), evalue.getCPtr(e), SWIGTYPE_p_p_char.getCPtr(pname));
  }

  public static void reduce_evalue(evalue e) {
    PolylibJNI.reduce_evalue(evalue.getCPtr(e));
  }

  public static void Enumeration_Free(Enumeration en) {
    PolylibJNI.Enumeration_Free(Enumeration.getCPtr(en));
  }

  public static Enumeration Ehrhart_Quick_Apx(Matrix M, Matrix C, SWIGTYPE_p_p_matrix Validity_Lattice, long MAXRAYS) {
    long cPtr = PolylibJNI.Ehrhart_Quick_Apx(Matrix.getCPtr(M), Matrix.getCPtr(C), SWIGTYPE_p_p_matrix.getCPtr(Validity_Lattice), MAXRAYS);
    return (cPtr == 0) ? null : new Enumeration(cPtr, false);
  }

  public static Enumeration Enumeration_zero(long nbParms, long maxRays) {
    long cPtr = PolylibJNI.Enumeration_zero(nbParms, maxRays);
    return (cPtr == 0) ? null : new Enumeration(cPtr, false);
  }

  public static Enumeration Domain_Enumerate(Polyhedron D, Polyhedron C, long MAXRAYS, SWIGTYPE_p_p_char pn) {
    long cPtr = PolylibJNI.Domain_Enumerate(Polyhedron.getCPtr(D), Polyhedron.getCPtr(C), MAXRAYS, SWIGTYPE_p_p_char.getCPtr(pn));
    return (cPtr == 0) ? null : new Enumeration(cPtr, false);
  }

  public static void new_eadd(evalue e1, evalue res) {
    PolylibJNI.new_eadd(evalue.getCPtr(e1), evalue.getCPtr(res));
  }

  public static double compute_evalue(evalue e, SWIGTYPE_p_int list_args) {
    return PolylibJNI.compute_evalue(evalue.getCPtr(e), SWIGTYPE_p_int.getCPtr(list_args));
  }

  public static SWIGTYPE_p_int compute_poly(Enumeration en, SWIGTYPE_p_int list_args) {
    long cPtr = PolylibJNI.compute_poly(Enumeration.getCPtr(en), SWIGTYPE_p_int.getCPtr(list_args));
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static int in_domain(Polyhedron P, SWIGTYPE_p_int list_args) {
    return PolylibJNI.in_domain(Polyhedron.getCPtr(P), SWIGTYPE_p_int.getCPtr(list_args));
  }

  public static int SolveDiophantine(Matrix M, SWIGTYPE_p_p_matrix U, SWIGTYPE_p_p_Vector X) {
    return PolylibJNI.SolveDiophantine(Matrix.getCPtr(M), SWIGTYPE_p_p_matrix.getCPtr(U), SWIGTYPE_p_p_Vector.getCPtr(X));
  }

  public static void AffineHermite(Matrix A, SWIGTYPE_p_p_matrix H, SWIGTYPE_p_p_matrix U) {
    PolylibJNI.AffineHermite(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(H), SWIGTYPE_p_p_matrix.getCPtr(U));
  }

  public static void AffineSmith(Matrix A, SWIGTYPE_p_p_matrix U, SWIGTYPE_p_p_matrix V, SWIGTYPE_p_p_matrix Diag) {
    PolylibJNI.AffineSmith(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(U), SWIGTYPE_p_p_matrix.getCPtr(V), SWIGTYPE_p_p_matrix.getCPtr(Diag));
  }

  public static Matrix ChangeLatticeDimension(Matrix A, int dimension) {
    long cPtr = PolylibJNI.ChangeLatticeDimension(Matrix.getCPtr(A), dimension);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix EmptyLattice(int dimension) {
    long cPtr = PolylibJNI.EmptyLattice(dimension);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix ExtractLinearPart(Matrix A) {
    long cPtr = PolylibJNI.ExtractLinearPart(Matrix.getCPtr(A));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static int FindHermiteBasisofDomain(Polyhedron A, SWIGTYPE_p_p_matrix B) {
    return PolylibJNI.FindHermiteBasisofDomain(Polyhedron.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(B));
  }

  public static Matrix Homogenise(Matrix A, Bool Forward) {
    long cPtr = PolylibJNI.Homogenise(Matrix.getCPtr(A), Forward.swigValue());
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static int intcompare(SWIGTYPE_p_void a, SWIGTYPE_p_void b) {
    return PolylibJNI.intcompare(SWIGTYPE_p_void.getCPtr(a), SWIGTYPE_p_void.getCPtr(b));
  }

  public static Bool isEmptyLattice(Matrix A) {
    return Bool.swigToEnum(PolylibJNI.isEmptyLattice(Matrix.getCPtr(A)));
  }

  public static Bool isfulldim(Matrix m) {
    return Bool.swigToEnum(PolylibJNI.isfulldim(Matrix.getCPtr(m)));
  }

  public static Bool IsLattice(Matrix m) {
    return Bool.swigToEnum(PolylibJNI.IsLattice(Matrix.getCPtr(m)));
  }

  public static Bool isLinear(Matrix A) {
    return Bool.swigToEnum(PolylibJNI.isLinear(Matrix.getCPtr(A)));
  }

  public static LatticeUnion LatticeDifference(Matrix A, Matrix B) {
    long cPtr = PolylibJNI.LatticeDifference(Matrix.getCPtr(A), Matrix.getCPtr(B));
    return (cPtr == 0) ? null : new LatticeUnion(cPtr, false);
  }

  public static Matrix LatticeImage(Matrix A, Matrix M) {
    long cPtr = PolylibJNI.LatticeImage(Matrix.getCPtr(A), Matrix.getCPtr(M));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Bool LatticeIncludes(Matrix A, Matrix B) {
    return Bool.swigToEnum(PolylibJNI.LatticeIncludes(Matrix.getCPtr(A), Matrix.getCPtr(B)));
  }

  public static Matrix LatticeIntersection(Matrix X, Matrix Y) {
    long cPtr = PolylibJNI.LatticeIntersection(Matrix.getCPtr(X), Matrix.getCPtr(Y));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix LatticePreimage(Matrix L, Matrix G) {
    long cPtr = PolylibJNI.LatticePreimage(Matrix.getCPtr(L), Matrix.getCPtr(G));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static LatticeUnion LatticeSimplify(LatticeUnion latlist) {
    long cPtr = PolylibJNI.LatticeSimplify(LatticeUnion.getCPtr(latlist));
    return (cPtr == 0) ? null : new LatticeUnion(cPtr, false);
  }

  public static LatticeUnion LatticeUnion_Alloc() {
    long cPtr = PolylibJNI.LatticeUnion_Alloc();
    return (cPtr == 0) ? null : new LatticeUnion(cPtr, false);
  }

  public static void LatticeUnion_Free(LatticeUnion Head) {
    PolylibJNI.LatticeUnion_Free(LatticeUnion.getCPtr(Head));
  }

  public static void PrintLatticeUnion(SWIGTYPE_p_FILE fp, String format, LatticeUnion Head) {
    PolylibJNI.PrintLatticeUnion(SWIGTYPE_p_FILE.getCPtr(fp), format, LatticeUnion.getCPtr(Head));
  }

  public static Bool sameAffinepart(Matrix A, Matrix B) {
    return Bool.swigToEnum(PolylibJNI.sameAffinepart(Matrix.getCPtr(A), Matrix.getCPtr(B)));
  }

  public static Bool sameLattice(Matrix A, Matrix B) {
    return Bool.swigToEnum(PolylibJNI.sameLattice(Matrix.getCPtr(A), Matrix.getCPtr(B)));
  }

  public static LatticeUnion Lattice2LatticeUnion(Matrix X, Matrix Y) {
    long cPtr = PolylibJNI.Lattice2LatticeUnion(Matrix.getCPtr(X), Matrix.getCPtr(Y));
    return (cPtr == 0) ? null : new LatticeUnion(cPtr, false);
  }

  public static void Lcm3(int a, int b, SWIGTYPE_p_int c) {
    PolylibJNI.Lcm3(a, b, SWIGTYPE_p_int.getCPtr(c));
  }

  public static Matrix AddANullColumn(Matrix M) {
    long cPtr = PolylibJNI.AddANullColumn(Matrix.getCPtr(M));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix AddANullRow(Matrix M) {
    long cPtr = PolylibJNI.AddANullRow(Matrix.getCPtr(M));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void ExchangeColumns(Matrix M, int Column1, int Column2) {
    PolylibJNI.ExchangeColumns(Matrix.getCPtr(M), Column1, Column2);
  }

  public static void ExchangeRows(Matrix M, int Row1, int Row2) {
    PolylibJNI.ExchangeRows(Matrix.getCPtr(M), Row1, Row2);
  }

  public static int findHermiteBasis(Matrix M, SWIGTYPE_p_p_matrix Result) {
    return PolylibJNI.findHermiteBasis(Matrix.getCPtr(M), SWIGTYPE_p_p_matrix.getCPtr(Result));
  }

  public static Matrix Identity(long size) {
    long cPtr = PolylibJNI.Identity(size);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Bool isinHnf(Matrix A) {
    return Bool.swigToEnum(PolylibJNI.isinHnf(Matrix.getCPtr(A)));
  }

  public static Bool isIntegral(Matrix A) {
    return Bool.swigToEnum(PolylibJNI.isIntegral(Matrix.getCPtr(A)));
  }

  public static SWIGTYPE_p_int Lcm(int i, int j) {
    long cPtr = PolylibJNI.Lcm(i, j);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static Matrix Matrix_Copy(Matrix Src) {
    long cPtr = PolylibJNI.Matrix_Copy(Matrix.getCPtr(Src));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void PutColumnFirst(Matrix X, int Columnnumber) {
    PolylibJNI.PutColumnFirst(Matrix.getCPtr(X), Columnnumber);
  }

  public static void PutColumnLast(Matrix X, int Columnnumber) {
    PolylibJNI.PutColumnLast(Matrix.getCPtr(X), Columnnumber);
  }

  public static void PutRowFirst(Matrix X, int Rownumber) {
    PolylibJNI.PutRowFirst(Matrix.getCPtr(X), Rownumber);
  }

  public static void PutRowLast(Matrix X, int Rownumber) {
    PolylibJNI.PutRowLast(Matrix.getCPtr(X), Rownumber);
  }

  public static Matrix RemoveNColumns(Matrix M, int FirstColumnnumber, int NumColumns) {
    long cPtr = PolylibJNI.RemoveNColumns(Matrix.getCPtr(M), FirstColumnnumber, NumColumns);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix RemoveColumn(Matrix M, int Columnnumber) {
    long cPtr = PolylibJNI.RemoveColumn(Matrix.getCPtr(M), Columnnumber);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix RemoveRow(Matrix M, int Rownumber) {
    long cPtr = PolylibJNI.RemoveRow(Matrix.getCPtr(M), Rownumber);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix Transpose(Matrix A) {
    long cPtr = PolylibJNI.Transpose(Matrix.getCPtr(A));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void Smith(Matrix A, SWIGTYPE_p_p_matrix U, SWIGTYPE_p_p_matrix V, SWIGTYPE_p_p_matrix Product) {
    PolylibJNI.Smith(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(U), SWIGTYPE_p_p_matrix.getCPtr(V), SWIGTYPE_p_p_matrix.getCPtr(Product));
  }

  public static void Hermite(Matrix A, SWIGTYPE_p_p_matrix H, SWIGTYPE_p_p_matrix U) {
    PolylibJNI.Hermite(Matrix.getCPtr(A), SWIGTYPE_p_p_matrix.getCPtr(H), SWIGTYPE_p_p_matrix.getCPtr(U));
  }

  public static void CanonicalForm(ZPolyhedron Zpol, SWIGTYPE_p_p_ZPolyhedron Result, SWIGTYPE_p_p_matrix Basis) {
    PolylibJNI.CanonicalForm(ZPolyhedron.getCPtr(Zpol), SWIGTYPE_p_p_ZPolyhedron.getCPtr(Result), SWIGTYPE_p_p_matrix.getCPtr(Basis));
  }

  public static ZPolyhedron EmptyZPolyhedron(int dimension) {
    long cPtr = PolylibJNI.EmptyZPolyhedron(dimension);
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron IntegraliseLattice(ZPolyhedron A) {
    long cPtr = PolylibJNI.IntegraliseLattice(ZPolyhedron.getCPtr(A));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static Bool isEmptyZPolyhedron(ZPolyhedron Zpol) {
    return Bool.swigToEnum(PolylibJNI.isEmptyZPolyhedron(ZPolyhedron.getCPtr(Zpol)));
  }

  public static ZPolyhedron ZDomainDifference(ZPolyhedron A, ZPolyhedron B) {
    long cPtr = PolylibJNI.ZDomainDifference(ZPolyhedron.getCPtr(A), ZPolyhedron.getCPtr(B));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron ZDomainImage(ZPolyhedron A, Matrix Func) {
    long cPtr = PolylibJNI.ZDomainImage(ZPolyhedron.getCPtr(A), Matrix.getCPtr(Func));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static Bool ZDomainIncludes(ZPolyhedron A, ZPolyhedron B) {
    return Bool.swigToEnum(PolylibJNI.ZDomainIncludes(ZPolyhedron.getCPtr(A), ZPolyhedron.getCPtr(B)));
  }

  public static ZPolyhedron ZDomainIntersection(ZPolyhedron A, ZPolyhedron B) {
    long cPtr = PolylibJNI.ZDomainIntersection(ZPolyhedron.getCPtr(A), ZPolyhedron.getCPtr(B));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron ZDomainPreimage(ZPolyhedron A, Matrix Func) {
    long cPtr = PolylibJNI.ZDomainPreimage(ZPolyhedron.getCPtr(A), Matrix.getCPtr(Func));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static void ZDomainPrint(SWIGTYPE_p_FILE fp, String format, ZPolyhedron A) {
    PolylibJNI.ZDomainPrint(SWIGTYPE_p_FILE.getCPtr(fp), format, ZPolyhedron.getCPtr(A));
  }

  public static ZPolyhedron ZDomainSimplify(ZPolyhedron ZDom) {
    long cPtr = PolylibJNI.ZDomainSimplify(ZPolyhedron.getCPtr(ZDom));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron ZDomainUnion(ZPolyhedron A, ZPolyhedron B) {
    long cPtr = PolylibJNI.ZDomainUnion(ZPolyhedron.getCPtr(A), ZPolyhedron.getCPtr(B));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron ZDomain_Copy(ZPolyhedron Head) {
    long cPtr = PolylibJNI.ZDomain_Copy(ZPolyhedron.getCPtr(Head));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static void ZDomain_Free(ZPolyhedron Head) {
    PolylibJNI.ZDomain_Free(ZPolyhedron.getCPtr(Head));
  }

  public static Bool ZPolyhedronIncludes(ZPolyhedron A, ZPolyhedron B) {
    return Bool.swigToEnum(PolylibJNI.ZPolyhedronIncludes(ZPolyhedron.getCPtr(A), ZPolyhedron.getCPtr(B)));
  }

  public static ZPolyhedron ZPolyhedron_Alloc(Matrix Lat, Polyhedron Poly) {
    long cPtr = PolylibJNI.ZPolyhedron_Alloc(Matrix.getCPtr(Lat), Polyhedron.getCPtr(Poly));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static ZPolyhedron SplitZpolyhedron(ZPolyhedron ZPol, Matrix B) {
    long cPtr = PolylibJNI.SplitZpolyhedron(ZPolyhedron.getCPtr(ZPol), Matrix.getCPtr(B));
    return (cPtr == 0) ? null : new ZPolyhedron(cPtr, false);
  }

  public static Matrix constraintsView(Polyhedron P) {
    long cPtr = PolylibJNI.constraintsView(Polyhedron.getCPtr(P));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void constraintsView_Free(Matrix M) {
    PolylibJNI.constraintsView_Free(Matrix.getCPtr(M));
  }

  public static void split_constraints(Matrix M, SWIGTYPE_p_p_matrix Eqs, SWIGTYPE_p_p_matrix Ineqs) {
    PolylibJNI.split_constraints(Matrix.getCPtr(M), SWIGTYPE_p_p_matrix.getCPtr(Eqs), SWIGTYPE_p_p_matrix.getCPtr(Ineqs));
  }

  public static Matrix Identity_Matrix(long dim) {
    long cPtr = PolylibJNI.Identity_Matrix(dim);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void mtransformation_inverse(Matrix transf, SWIGTYPE_p_p_matrix inv, SWIGTYPE_p_int g) {
    PolylibJNI.mtransformation_inverse(Matrix.getCPtr(transf), SWIGTYPE_p_p_matrix.getCPtr(inv), SWIGTYPE_p_int.getCPtr(g));
  }

  public static void mpolyhedron_simplify(Matrix polyh) {
    PolylibJNI.mpolyhedron_simplify(Matrix.getCPtr(polyh));
  }

  public static void mpolyhedron_inflate(Matrix polyh, long nb_parms) {
    PolylibJNI.mpolyhedron_inflate(Matrix.getCPtr(polyh), nb_parms);
  }

  public static void mpolyhedron_deflate(Matrix polyh, long nb_parms) {
    PolylibJNI.mpolyhedron_deflate(Matrix.getCPtr(polyh), nb_parms);
  }

  public static void eliminate_var_with_constr(Matrix Eliminator, long eliminator_row, Matrix Victim, long victim_row, long var_to_elim) {
    PolylibJNI.eliminate_var_with_constr(Matrix.getCPtr(Eliminator), eliminator_row, Matrix.getCPtr(Victim), victim_row, var_to_elim);
  }

  public static void mpolyhedron_compress_last_vars(Matrix M, Matrix compression) {
    PolylibJNI.mpolyhedron_compress_last_vars(Matrix.getCPtr(M), Matrix.getCPtr(compression));
  }

  public static long mpolyhedron_eliminate_first_variables(Matrix Eqs, Matrix Ineqs) {
    return PolylibJNI.mpolyhedron_eliminate_first_variables(Matrix.getCPtr(Eqs), Matrix.getCPtr(Ineqs));
  }

  public static void Matrix_subMatrix(Matrix M, long sr, long sc, long nbR, long nbC, SWIGTYPE_p_p_matrix sub) {
    PolylibJNI.Matrix_subMatrix(Matrix.getCPtr(M), sr, sc, nbR, nbC, SWIGTYPE_p_p_matrix.getCPtr(sub));
  }

  public static void Matrix_copySubMatrix(Matrix M1, long sr1, long sc1, long nbR, long nbC, Matrix M2, long sr2, long sc2) {
    PolylibJNI.Matrix_copySubMatrix(Matrix.getCPtr(M1), sr1, sc1, nbR, nbC, Matrix.getCPtr(M2), sr2, sc2);
  }

  public static void Matrix_oppose(Matrix M) {
    PolylibJNI.Matrix_oppose(Matrix.getCPtr(M));
  }

  public static long nb_bits(java.math.BigInteger x) {
    return PolylibJNI.nb_bits(x);
  }

  public static SWIGTYPE_p_unsigned_int permutation_inverse(SWIGTYPE_p_unsigned_int perm, long nb_elems) {
    long cPtr = PolylibJNI.permutation_inverse(SWIGTYPE_p_unsigned_int.getCPtr(perm), nb_elems);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static Matrix mtransformation_permute(Matrix transf, SWIGTYPE_p_unsigned_int permutation) {
    long cPtr = PolylibJNI.mtransformation_permute(Matrix.getCPtr(transf), SWIGTYPE_p_unsigned_int.getCPtr(permutation));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix mpolyhedron_permute(Matrix polyh, SWIGTYPE_p_unsigned_int permutation) {
    long cPtr = PolylibJNI.mpolyhedron_permute(Matrix.getCPtr(polyh), SWIGTYPE_p_unsigned_int.getCPtr(permutation));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void Constraints_permute(Matrix C, SWIGTYPE_p_unsigned_int perm, SWIGTYPE_p_p_matrix Cp) {
    PolylibJNI.Constraints_permute(Matrix.getCPtr(C), SWIGTYPE_p_unsigned_int.getCPtr(perm), SWIGTYPE_p_p_matrix.getCPtr(Cp));
  }

  public static java.math.BigInteger eliminable_vars(Matrix Eqs, long start, long end) {
    return PolylibJNI.eliminable_vars(Matrix.getCPtr(Eqs), start, end);
  }

  public static SWIGTYPE_p_unsigned_int find_a_permutation(Matrix Eqs, long nb_parms) {
    long cPtr = PolylibJNI.find_a_permutation(Matrix.getCPtr(Eqs), nb_parms);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_int permutation_for_full_dim2(SWIGTYPE_p_unsigned_int vars_to_keep, long nb_keep, long nb_vars_parms, long nb_parms) {
    long cPtr = PolylibJNI.permutation_for_full_dim2(SWIGTYPE_p_unsigned_int.getCPtr(vars_to_keep), nb_keep, nb_vars_parms, nb_parms);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_int(cPtr, false);
  }

  public static void Equalities_integerSolution(Matrix Eqs, SWIGTYPE_p_p_matrix sol) {
    PolylibJNI.Equalities_integerSolution(Matrix.getCPtr(Eqs), SWIGTYPE_p_p_matrix.getCPtr(sol));
  }

  public static void Equalities_validityLattice(Matrix Eqs, int a, SWIGTYPE_p_p_matrix vl) {
    PolylibJNI.Equalities_validityLattice(Matrix.getCPtr(Eqs), a, SWIGTYPE_p_p_matrix.getCPtr(vl));
  }

  public static void Equalities_intModBasis(Matrix B, Matrix C, Matrix d, SWIGTYPE_p_p_matrix imb) {
    PolylibJNI.Equalities_intModBasis(Matrix.getCPtr(B), Matrix.getCPtr(C), Matrix.getCPtr(d), SWIGTYPE_p_p_matrix.getCPtr(imb));
  }

  public static void Constraints_fullDimensionize(SWIGTYPE_p_p_matrix M, SWIGTYPE_p_p_matrix C, SWIGTYPE_p_p_matrix VL, SWIGTYPE_p_p_matrix Eqs, SWIGTYPE_p_p_matrix ParmEqs, SWIGTYPE_p_p_unsigned_int elimVars, SWIGTYPE_p_p_unsigned_int elimParms, int maxRays) {
    PolylibJNI.Constraints_fullDimensionize(SWIGTYPE_p_p_matrix.getCPtr(M), SWIGTYPE_p_p_matrix.getCPtr(C), SWIGTYPE_p_p_matrix.getCPtr(VL), SWIGTYPE_p_p_matrix.getCPtr(Eqs), SWIGTYPE_p_p_matrix.getCPtr(ParmEqs), SWIGTYPE_p_p_unsigned_int.getCPtr(elimVars), SWIGTYPE_p_p_unsigned_int.getCPtr(elimParms), maxRays);
  }

  public static Matrix Constraints_Remove_parm_eqs(SWIGTYPE_p_p_matrix M, SWIGTYPE_p_p_matrix Ctxt, int renderSpace, SWIGTYPE_p_p_unsigned_int elimParms) {
    long cPtr = PolylibJNI.Constraints_Remove_parm_eqs(SWIGTYPE_p_p_matrix.getCPtr(M), SWIGTYPE_p_p_matrix.getCPtr(Ctxt), renderSpace, SWIGTYPE_p_p_unsigned_int.getCPtr(elimParms));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static void Constraints_removeElimCols(Matrix M, long nbVars, SWIGTYPE_p_unsigned_int elimParms, SWIGTYPE_p_p_matrix newM) {
    PolylibJNI.Constraints_removeElimCols(Matrix.getCPtr(M), nbVars, SWIGTYPE_p_unsigned_int.getCPtr(elimParms), SWIGTYPE_p_p_matrix.getCPtr(newM));
  }

  public static void Lattice_extractSubLattice(Matrix lat, long k, SWIGTYPE_p_p_matrix subLat) {
    PolylibJNI.Lattice_extractSubLattice(Matrix.getCPtr(lat), k, SWIGTYPE_p_p_matrix.getCPtr(subLat));
  }

  public static Polyhedron Polyhedron_Remove_parm_eqs(SWIGTYPE_p_p_polyhedron P, SWIGTYPE_p_p_polyhedron C, int renderSpace, SWIGTYPE_p_p_unsigned_int elimParms, int maxRays) {
    long cPtr = PolylibJNI.Polyhedron_Remove_parm_eqs(SWIGTYPE_p_p_polyhedron.getCPtr(P), SWIGTYPE_p_p_polyhedron.getCPtr(C), renderSpace, SWIGTYPE_p_p_unsigned_int.getCPtr(elimParms), maxRays);
    return (cPtr == 0) ? null : new Polyhedron(cPtr, false);
  }

  public static Matrix int_ker(Matrix M) {
    long cPtr = PolylibJNI.int_ker(Matrix.getCPtr(M));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix full_dimensionize(Matrix M, int nb_parms, SWIGTYPE_p_p_matrix Validity_Lattice) {
    long cPtr = PolylibJNI.full_dimensionize(Matrix.getCPtr(M), nb_parms, SWIGTYPE_p_p_matrix.getCPtr(Validity_Lattice));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix affine_periods(Matrix M, Matrix d) {
    long cPtr = PolylibJNI.affine_periods(Matrix.getCPtr(M), Matrix.getCPtr(d));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix int_mod_basis(Matrix Bp, Matrix Cp, Matrix d) {
    long cPtr = PolylibJNI.int_mod_basis(Matrix.getCPtr(Bp), Matrix.getCPtr(Cp), Matrix.getCPtr(d));
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }

  public static Matrix compress_parms(Matrix E, int nb_parms) {
    long cPtr = PolylibJNI.compress_parms(Matrix.getCPtr(E), nb_parms);
    return (cPtr == 0) ? null : new Matrix(cPtr, false);
  }
  
  public static Matrix newMatrix(int[][] array){
	  Matrix ret=Matrix_Alloc(array.length, array[0].length);
	  fillMatrix(Matrix.getCPtr(ret),array);
	  return ret;
  }
  
  public static native void fillMatrix(long cPtrMatrix,int[][] array);

}
